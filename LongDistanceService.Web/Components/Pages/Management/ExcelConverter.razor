@attribute [Route(ServiceRoutes.Admin.Excel)]
@using LongDistanceService.Domain.Services.Abstract
@using LongDistanceService.Web.Routes
@using LongDistanceService.Web.Services.Abstract

@rendermode InteractiveServer
@inject IJSRuntime JS

<h3>ExcelConverter</h3>

<div style="width: 100%; padding: 10%">
    <EditForm method="get" Model="Model" FormName="excel" OnValidSubmit="DownloadFileFromStream">
        <div class="form-floating mb-3">
            <InputText @bind-Value="Model.TableName" class="form-control"/>
            <label for="tableName" class="form-label">Название таблицы</label>
            <ValidationMessage For="() => Model.TableName" class="text-danger"/>
        </div>
        <div>
            <button type="submit" class="w-100 btn btn-dark btn-lg">Получить excel</button>
        </div>
    </EditForm>
</div>

<script>
  window.downloadFileFromStream = async (fileName, contentStreamReference) => {
    const arrayBuffer = await contentStreamReference.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const anchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = fileName ?? '';
    anchorElement.click();
    anchorElement.remove();
    URL.revokeObjectURL(url);
  }
</script>

@code {

    public class TableNameModel
    {
        public string TableName { get; set; } = string.Empty;
    }

    [SupplyParameterFromForm] public TableNameModel Model { get; set; } = new();

    [Inject] public IExcelSqlConverter ExcelSqlConverter { get; set; } = null!;
    [Inject] public IScenarioService ScenarioService { get; set; } = null!;
    [Inject] public ISecurityService SecurityService { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;

    public bool Process { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var result = await ScenarioService.TryAuthenticateUserAsync(ServiceRoutes.Home, tryRefreshToken: true, redirectToLogin: true);

        if (result == null)
            NavigationManager.NavigateTo(ServiceRoutes.Home);
        else
        {
            var rights = await SecurityService.GetUserRightsToPageAsync(result.User, ServiceRoutes.Admin.Excel);

            if (rights == null)
                NavigationManager.NavigateTo(ServiceRoutes.Home);
            await base.OnInitializedAsync();
        }
    }


    private async Task DownloadFileFromStream()
    {
        if (!Process)
        {
            Process = true;
            await using var fileStream = await ExcelSqlConverter.ConvertTableToExcelAsync(Model.TableName);

            if (fileStream == null)
            {
                Process = false;
                return;
            }

            using var streamRef = new DotNetStreamReference(stream: fileStream);

            await JS.InvokeVoidAsync("downloadFileFromStream", $"{Model.TableName}.xlsm", streamRef);
            Process = false;
        }
    }

}