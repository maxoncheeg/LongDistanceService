@using LongDistanceService.Domain.Enums
@using LongDistanceService.Web.Routes
@using LongDistanceService.Domain.Services.Abstract
@using LongDistanceService.Web.Services.Abstract
@using LongDistanceService.Domain.Models.Abstract
@using LongDistanceService.Domain.Models.Abstract.Order
@using LongDistanceService.Web.Models.Scenario.Abstract
@attribute [Route(ServiceRoutes.Orders.Show)]
@rendermode InteractiveServer


<div class="box">
    @if (Order != null)
    {
        <h2>Заказ №@Order.Id</h2>

        <div class="propertiesList">
            <div class="propertiesColumn">
                <h6 class="c-g">Откуда</h6>
                <h5>@Order.SendCity.Name @Order.SendStreet.Name @Order.SendHouseNumber</h5>

                <h6 class="c-g">Куда</h6>
                <h5>@Order.ReceiveCity.Name @Order.ReceiveStreet.Name @Order.ReceiveHouseNumber</h5>

                <h6 class="c-g">Авто</h6>
                <h5>@Order.Vehicle.Model.Brand.Name @Order.Vehicle.Model.Name @Order.Vehicle.Year</h5>

                <h6 class="c-g">Отправитель</h6>
                @if(Order.SenderType == ClientTypes.Individual)
                {
                    <h5>@Order.IndividualSender.Surname @Order.IndividualSender.Name @Order.IndividualSender.Patronymic</h5>
                }
                else
                {
                    <h5>@Order.LegalSender.Surname @Order.LegalSender.Name @Order.LegalSender.Patronymic</h5>
                }

                <h6 class="c-g">Получатель</h6>
                @if(Order.ReceiverType == ClientTypes.Individual)
                {
                    <h5>@Order.IndividualReceiver.Surname @Order.IndividualReceiver.Name @Order.IndividualReceiver.Patronymic</h5>
                }
                else
                {
                    <h5>@Order.LegalReceiver.Surname @Order.LegalReceiver.Name @Order.LegalReceiver.Patronymic</h5>
                }

                <h6 class="c-g">Состояние</h6>
                <h5>@GetState(Order.State)</h5>

                <h6 class="c-g">Длина маршрута</h6>
                <h5>@Order.RouteLength км</h5>

                <h6 class="c-g">Дата погрузки</h6>
                <h5>@Order.LoadingDate.Value.ToLongDateString()</h5>
            </div>

            <div class="propertiesColumn">
                <h6 class="c-g">Водители:</h6>
                @foreach (var driver in Order.OrderDrivers)
                {
                    <h5>@driver.Surname @driver.Name @driver.Patronymic | Стаж: @driver.Experience</h5>
                }

                <h6 class="c-g">Грузы:</h6>
                @foreach (var cargo in Order.OrderCargoes)
                {
                    <h5>@cargo.Cargo.Name | @cargo.Amount (@cargo.Cargo.Category.Unit.Name) | @cargo.Weight кг </h5>
                }

                <h6 class="c-g">Полная стоимость:</h6>
                <h5>@Order.OrderCargoes.Sum(c => c.Price) руб.</h5>
            </div>
        </div>
    }
</div>


@code {
    [Parameter] public string Id { get; set; } = string.Empty;
    //[Parameter] public string Type { get; set; } = string.Empty; // update add show

    [Inject] public IScenarioService ScenarioService { get; set; } = null!;
    [Inject] public IJSRuntime JsRuntime { get; set; } = null!;
    [Inject] public ISecurityService SecurityService { get; set; } = null!;
    [Inject] public IOrderService OrderService { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;

    public IAuthResult? AuthResult { get; set; }
    public IUserRights? UserRights { get; set; }

    public IOrder? Order { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthResult = await ScenarioService.TryAuthenticateUserAsync(tryRefreshToken: true, redirectToLogin: true);

        if (AuthResult == null)
            NavigationManager.NavigateTo(ServiceRoutes.Home);
        else
        {
            UserRights = await SecurityService.GetUserRightsToPageAsync(AuthResult.User, ServiceRoutes.Vehicles.Route);


            if (UserRights is not { Read: true })
                NavigationManager.NavigateTo(ServiceRoutes.Home);

            if (int.TryParse(Id, out var id))
            {
                Order = await OrderService.GetOrderById(id);
            }

            StateHasChanged();
            await base.OnInitializedAsync();
        }
    }
    
    
    public string GetState(OrderState state)
    {
        return state switch
        {
            OrderState.Running => "В пути",
            OrderState.Complete => "Завершен", 
            OrderState.Loading => "Погрузка"
        };
    }
}