@using LongDistanceService.Domain.Enums
@using LongDistanceService.Web.Routes
@using LongDistanceService.Web.Services.Abstract
@using LongDistanceService.Domain.Services.Abstract
@using LongDistanceService.Web.Models.Scenario.Abstract
@using LongDistanceService.Domain.Models.Abstract
@using LongDistanceService.Domain.Models.Abstract.Order
@attribute [Route(ServiceRoutes.Orders.Route)]
@rendermode InteractiveServer

<div class="box ">
    <h2>Заказы</h2>
    <a class="btn btn-info" href='@($"{ServiceRoutes.Orders.Show}/0/add")'>Добавить заказ</a>
    <div class="magicCenter">
        <div class="vehicleListBox" style="width: 960px">
            @foreach (var order in Orders)
            {
                <div class="vehicleBox">
                    <div class="vehicleImage">
                        <img src="@order.ImagePath" alt="Нету фото"/>
                    </div>
                    <div class="vehicleInfo">
                        <p><span class="fw-bold">Откуда:</span> @order.From</p>
                        <p><span class="fw-bold">Куда:</span> @order.To</p>
                        <p><span class="fw-bold">Авто:</span> @order.Vehicle</p>
                        <p><span class="fw-bold">Кол-во водителей:</span> @order.DriversAmount</p>
                        <p><span class="fw-bold">Состояние:</span> @GetState(order.State)</p>
                        <div class="buttonBox">
                            @if (UserRights?.Write ?? false)
                            {
                                <a class="btn btn-info" href='@($"{ServiceRoutes.Orders.Route}/{order.Id}/show")'>Подробнее</a>
                            }
                            @* @if (UserRights?.Edit ?? false) *@
                            @* { *@
                            @*     <a class="btn btn-info" href='@($"{ServiceRoutes.Vehicles.Edit}/{order.Id}/update")'>Изменить</a> *@
                            @* } *@
                            @* @if (UserRights?.Delete ?? false) *@
                            @* { *@
                            @*     <form @formname="deleteVehicle" method="post" @onsubmit="@(() => DeleteCar(vehicle.Id))"> *@
                            @*         <button type="submit" class="btn btn-danger">Удалить</button> *@
                            @*         <AntiforgeryToken/> *@
                            @*     </form> *@
                            @* } *@
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

</div>

@code {
    [Inject] public IScenarioService ScenarioService { get; set; } = null!;
    [Inject] public ISecurityService SecurityService { get; set; } = null!;
    [Inject] public IOrderService OrderService { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;

    public IAuthResult? AuthResult { get; set; } = null;
    public IUserRights? UserRights { get; set; } = null;

    public IList<IOrderInfo> Orders { get; set; } = [];


    protected override async Task OnInitializedAsync()
    {
        AuthResult = await ScenarioService.TryAuthenticateUserAsync(ServiceRoutes.Home, tryRefreshToken: true, redirectToLogin: true);

        if (AuthResult == null)
            NavigationManager.NavigateTo(ServiceRoutes.Home);
        else
        {
            UserRights = await SecurityService.GetUserRightsToPageAsync(AuthResult.User, ServiceRoutes.Vehicles.Route);

            if (UserRights == null || !UserRights.Read)
                NavigationManager.NavigateTo(ServiceRoutes.Home);

            Orders = await OrderService.GetOrdersInfo();

            await base.OnInitializedAsync();
        }
    }

    public async Task DeleteCar(int id)
    {
        //await OrderService.DeleteVehicleAsync(id);
        //Orders = await OrderService.GetVehiclesAsync();
        //StateHasChanged();
    }

    public string GetState(OrderState state)
    {
        return state switch
        {
            OrderState.Running => "В пути",
            OrderState.Complete => "Завершен", 
            OrderState.Loading => "Погрузка"
        };
    }

}