@using LongDistanceService.Domain.Models.Abstract
@using LongDistanceService.Domain.Models.Abstract.Personals
@using LongDistanceService.Domain.Services.Abstract
@using LongDistanceService.Web.Models.Personals
@using LongDistanceService.Web.Models.Scenario.Abstract
@using LongDistanceService.Web.Routes
@using LongDistanceService.Web.Services.Abstract

@attribute [Route(ServiceRoutes.Clients.Individual)]
@rendermode InteractiveServer

<style>
    .refBox {
        text-align: center;
        padding: 10px;
    }

    .refList {
        width: 95%;
        margin: auto;
        height: 400px;
        overflow-y: auto;
    }

    .inputs {
        display: flex;
        flex-wrap: wrap;
        flex-direction: row;
        justify-content: center;
    }

    .w-20 {
        width: 25%;
        margin: 5px;
    }

</style>

<div class="refBox justify-content-center">
    <h3>ФИЗИЧЕСКИЕ ЛИЦА</h3>

    <button class="btn btn-lg btn-outline-info m-2 w-75" @onclick="AddIndividual">Добавить физ. лицо</button>
    
    <div class="refList">
        <table class="table table-hover">
            <thead>
            <tr>
                <th scope="col">ФИО</th>
                <th scope="col">Телефон</th>
                <th scope="col">Серия и номер паспорта</th>
                <th scope="col">Дата выдачи</th>
                <th scope="col">Кем выдан</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var legal in IndividualList)
            {
                <tr @onclick="@(() => SelectIndividual(legal))">
                    <th scope="row">@($"{legal.Surname} {legal.Name} {legal.Patronymic}")</th>
                    <td>@legal.Phone</td>
                    <td>@legal.PassportSeries</td>
                    <td>@legal.PassportDate.ToLongDateString()</td>
                    <td>@legal.PassportIssued</td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    @if (SelectedIndividual != null || SelectedIndividual == null && IsAdd)
    {
        <div class="justify-content-center w-75 m-auto">
            <EditForm Model="Model" class="inputs" method="post" FormName="cargoCategoryEdit"
                      OnValidSubmit="EditIndividual">
                <DataAnnotationsValidator/>
                <div class="w-20">
                    <h6 class="c-g"> Имя </h6>
                    <InputText class="form-control  m-auto"
                               @bind-Value="@Model.Name"> @Model.Name </InputText>
                    <ValidationMessage For="() => Model.Name" class="text-danger"/>
                    <br>
                </div>
                <div class="w-20">
                    <h6 class="c-g"> Фамилия </h6>
                    <InputText class="form-control  m-auto"
                               @bind-Value="@Model.Surname"> @Model.Surname </InputText>
                    <ValidationMessage For="() => Model.Surname" class="text-danger"/>
                    <br>
                </div>
                <div class="w-20">
                    <h6 class="c-g"> Отчество </h6>
                    <InputText class="form-control  m-auto"
                               @bind-Value="@Model.Patronymic"> @Model.Patronymic </InputText>
                    <ValidationMessage For="() => Model.Patronymic" class="text-danger"/>
                    <br>
                </div>
                <div class="w-20">
                    <h6 class="c-g"> Телефон </h6>
                    <InputText class="form-control  m-auto"
                               @bind-Value="@Model.Phone"> @Model.Phone </InputText>
                    <ValidationMessage For="() => Model.Phone" class="text-danger"/>
                    <br>
                </div>
                <div class="w-20">
                    <h6 class="c-g"> Серия и номер паспорта </h6>
                    <InputText class="form-control  m-auto"
                               @bind-Value="@Model.PassportSeries"> @Model.PassportSeries </InputText>
                    <ValidationMessage For="() => Model.PassportSeries" class="text-danger"/>
                    <br>
                </div>
                <div class="w-20">
                    <h6 class="c-g"> Дата выдачи паспорта </h6>
                    <InputDate TValue="DateOnly" class="form-control  m-auto"
                               @bind-Value="@Model.PassportDate"> @Model.PassportDate </InputDate>
                    <ValidationMessage For="() => Model.PassportDate" class="text-danger"/>
                    <br>
                </div>
                <div class="w-20">
                    <h6 class="c-g"> Кем выдан паспорт </h6>
                    <InputText class="form-control  m-auto"
                               @bind-Value="@Model.PassportIssued"> @Model.PassportIssued </InputText>
                    <ValidationMessage For="() => Model.PassportIssued" class="text-danger"/>
                    <br>
                </div>
                <button type="submit"
                        class="btn btn-dark btn-lg w-100">@(SelectedIndividual == null ? "Добавить" : "Редактировать") </button>
            </EditForm>
            @if (SelectedIndividual != null)
            {
                <button type="submit"
                        class="btn btn-outline-danger btn-lg m-1 w-100" @onclick="DeleteIndividual"> Удалить
                </button>
            }

        </div>
    }
</div>

@code {
    [Inject] public IScenarioService ScenarioService { get; set; } = null!;
    [Inject] public ISecurityService SecurityService { get; set; } = null!;
    [Inject] public IPersonalService PersonalService { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;
    [Inject] public IJSRuntime JsRuntime { get; set; } = null!;

    public IAuthResult? AuthResult { get; set; }

    public IList<IIndividual> IndividualList { get; set; } = [];
    public IIndividual? SelectedIndividual { get; set; }
    public IndividualModel Model { get; set; } = new();

    public bool IsAdd { get; set; }

    public string Route = ServiceRoutes.Clients.Individual;

    protected override async Task OnInitializedAsync()
    {
        AuthResult = await ScenarioService.TryAuthenticateUserAsync(tryRefreshToken: true, redirectToLogin: true);

        if (AuthResult == null || !await SecurityService.IsManagementAsync())
            NavigationManager.NavigateTo(ServiceRoutes.Home);
        else
        {
            IndividualList = await PersonalService.GetIndividualsAsync();

            await base.OnInitializedAsync();
        }
    }

    public void SelectIndividual(IIndividual individual)
    {
        SelectedIndividual = individual;
        Model = new()
        {
            Id = SelectedIndividual.Id,
            Name = SelectedIndividual.Name,
            PassportDate = individual.PassportDate,
            PassportSeries = individual.PassportSeries,
            PassportIssued = individual.PassportIssued,
            Surname = individual.Surname,
            Patronymic = individual.Patronymic,
            Phone = individual.Phone
        };
        StateHasChanged();
    }

    private void AddIndividual()
    {
        IsAdd = true;
        SelectedIndividual = null;
        Model = new();
        StateHasChanged();
    }

    private async Task EditIndividual()
    {
        var auth = await ScenarioService.TryAuthenticateUserAsync(tryRefreshToken: true, redirectToLogin: true);
        if (auth == null || !await SecurityService.IsManagementAsync())
        {
            NavigationManager.NavigateTo(ServiceRoutes.Home);
            return;
        }

        bool result = await JsRuntime.InvokeAsync<bool>("confirm", "Вы уверены?");
        if (result)
        {
            var isEdited = await PersonalService.AddOrUpdateIndividualAsync(Model);
            if (!isEdited)
                await JsRuntime.InvokeAsync<object>("alert", "Ошибка при изменении");

            NavigationManager.NavigateTo(Route, true);
        }
    }

    private async Task DeleteIndividual()
    {
        if (SelectedIndividual != null)
        {
            var auth = await ScenarioService.TryAuthenticateUserAsync(tryRefreshToken: true, redirectToLogin: true);
            if (auth == null || !await SecurityService.IsManagementAsync())
            {
                NavigationManager.NavigateTo(ServiceRoutes.Home);
                return;
            }

            bool result = await JsRuntime.InvokeAsync<bool>("confirm", "Вы уверены?");
            if (result)
            {
                var isDeleted = await PersonalService.DeleteIndividualAsync(SelectedIndividual.Id);
                if (!isDeleted)
                    await JsRuntime.InvokeAsync<object>("alert", "Ошибка при удалении");

                NavigationManager.NavigateTo(Route, true);
            }
        }
    }

}