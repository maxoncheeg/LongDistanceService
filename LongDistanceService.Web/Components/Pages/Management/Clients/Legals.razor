@using LongDistanceService.Domain.Models.Abstract
@using LongDistanceService.Domain.Models.Abstract.Addresses
@using LongDistanceService.Domain.Models.Abstract.Personals
@using LongDistanceService.Domain.Services.Abstract
@using LongDistanceService.Web.Models.Personals
@using LongDistanceService.Web.Models.Scenario.Abstract
@using LongDistanceService.Web.Routes
@using LongDistanceService.Web.Services.Abstract

@attribute [Route(ServiceRoutes.Clients.Legal)]
@rendermode InteractiveServer

<style>
    .refBox {
        text-align: center;
        padding: 10px;
    }

    .refList {
        width: 95%;
        margin: auto;
        height: 400px;
        overflow-y: auto;
    }

    .inputs {
        display: flex;
        flex-wrap: wrap;
        flex-direction: row;
        justify-content: center;
    }

    .w-20 {
        width: 25%;
        margin: 5px;
    }

</style>

<div class="refBox justify-content-center">
    <h3>ЮРИДИЧЕСКИЕ ЛИЦА</h3>

    <button class="btn btn-lg btn-outline-info m-2 w-75" @onclick="AddLegal">Добавить юр. лицо</button>
    
    <div class="refList">
        <table class="table table-hover">
            <thead>
            <tr>
                <th scope="col">ФИО</th>
                <th scope="col">ИНН</th>
                <th scope="col">Компания</th>
                <th scope="col">Телефон</th>
                <th scope="col">Расчетный счет</th>
                <th scope="col">Банк</th>
                <th scope="col">Город</th>
                <th scope="col">Улица</th>
                <th scope="col">Дом</th>
                <th scope="col">Офис</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var legal in LegalList)
            {
                <tr @onclick="@(() => SelectLegal(legal))">
                    <th scope="row">@($"{legal.Surname} {legal.Name} {legal.Patronymic}")</th>
                    <td>@legal.TIN</td>
                    <td>@legal.CompanyName</td>
                    <td>@legal.Phone</td>
                    <td>@legal.Account</td>
                    <td>@legal.Bank.Name</td>
                    <td>@legal.City.Name</td>
                    <td>@legal.Street.Name</td>
                    <td>@legal.HouseNumber</td>
                    <td>@legal.OfficeNumber</td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    @if (SelectedLegal != null || SelectedLegal == null && IsAdd)
    {
        <div class="justify-content-center w-75 m-auto">
            <EditForm Model="Model" class="inputs" method="post" FormName="cargoCategoryEdit" OnValidSubmit="EditLegal">
                <DataAnnotationsValidator/>
                <div class="w-20">
                    <h6 class="c-g"> Имя </h6>
                    <InputText class="form-control  m-auto"
                               @bind-Value="@Model.Name"> @Model.Name </InputText>
                    <ValidationMessage For="() => Model.Name" class="text-danger"/>
                    <br>
                </div>
                <div class="w-20">
                    <h6 class="c-g"> Фамилия </h6>
                    <InputText class="form-control  m-auto"
                               @bind-Value="@Model.Surname"> @Model.Surname </InputText>
                    <ValidationMessage For="() => Model.Surname" class="text-danger"/>
                    <br>
                </div>
                <div class="w-20">
                    <h6 class="c-g"> Отчество </h6>
                    <InputText class="form-control  m-auto"
                               @bind-Value="@Model.Patronymic"> @Model.Patronymic </InputText>
                    <ValidationMessage For="() => Model.Patronymic" class="text-danger"/>
                    <br>
                </div>
                <div class="w-20">
                    <h6 class="c-g"> ИНН </h6>
                    <InputText class="form-control  m-auto"
                               @bind-Value="@Model.TIN"> @Model.TIN </InputText>
                    <ValidationMessage For="() => Model.TIN" class="text-danger"/>
                    <br>
                </div>
                <div class="w-20">
                    <h6 class="c-g"> Расчетный счет </h6>
                    <InputText class="form-control  m-auto"
                               @bind-Value="@Model.Account"> @Model.Account </InputText>
                    <ValidationMessage For="() => Model.Account" class="text-danger"/>
                    <br>
                </div>
                <div class="w-20">
                    <h6 class="c-g"> Телефон </h6>
                    <InputText class="form-control  m-auto"
                               @bind-Value="@Model.Phone"> @Model.Phone </InputText>
                    <ValidationMessage For="() => Model.Phone" class="text-danger"/>
                    <br>
                </div>
                <div class="w-20">
                    <h6 class="c-g"> Компания </h6>
                    <InputText class="form-control  m-auto"
                               @bind-Value="@Model.CompanyName"> @Model.CompanyName </InputText>
                    <ValidationMessage For="() => Model.CompanyName" class="text-danger"/>
                    <br>
                </div>
                <div class="w-20">
                    <h6 class="c-g">Банк</h6>
                    <InputSelect class="form-select  m-auto" @bind-Value="Model.BankId">
                        @for (int i = 0; i < Banks.Count; i++)
                        {
                            @if (SelectedLegal != null && Banks[i].Id == Model.BankId || SelectedLegal == null && i == 0)
                            {
                                <option selected="selected" value="@Banks[i].Id">@Banks[i].Name</option>
                            }
                            else
                            {
                                <option value="@Banks[i].Id">@Banks[i].Name</option>
                            }
                        }
                    </InputSelect>
                    <br>
                </div>
                <div class="w-20">
                    <h6 class="c-g">Город</h6>
                    <InputSelect class="form-select  m-auto" @bind-Value="Model.CityId">
                        @for (int i = 0; i < Cities.Count; i++)
                        {
                            @if (SelectedLegal != null && Cities[i].Id == Model.CityId || SelectedLegal == null && i == 0)
                            {
                                <option selected="selected" value="@Cities[i].Id">@Cities[i].Name</option>
                            }
                            else
                            {
                                <option value="@Cities[i].Id">@Cities[i].Name</option>
                            }
                        }
                    </InputSelect>
                    <br>
                </div>
                <div class="w-20">
                    <h6 class="c-g">Улица</h6>
                    <InputSelect class="form-select  m-auto" @bind-Value="Model.StreetId">
                        @for (int i = 0; i < Streets.Count; i++)
                        {
                            @if (SelectedLegal != null && Streets[i].Id == Model.StreetId || SelectedLegal == null && i == 0)
                            {
                                <option selected="selected" value="@Streets[i].Id">@Streets[i].Name</option>
                            }
                            else
                            {
                                <option value="@Streets[i].Id">@Streets[i].Name</option>
                            }
                        }
                    </InputSelect>
                    <br>
                </div>
                <div class="w-20">
                    <h6 class="c-g"> Номер дома </h6>
                    <InputText class="form-control  m-auto"
                               @bind-Value="@Model.HouseNumber"> @Model.HouseNumber </InputText>
                    <ValidationMessage For="() => Model.HouseNumber" class="text-danger"/>
                    <br>
                </div>
                <div class="w-20">
                    <h6 class="c-g"> Номер офиса </h6>
                    <InputText class="form-control  m-auto"
                               @bind-Value="@Model.OfficeNumber"> @Model.OfficeNumber </InputText>
                    <ValidationMessage For="() => Model.OfficeNumber" class="text-danger"/>
                    <br>
                </div>
                <button type="submit"
                        class="btn btn-dark btn-lg w-100">@(SelectedLegal == null ? "Добавить" : "Редактировать") </button>
            </EditForm>
            @if (SelectedLegal != null)
            {
                <button type="submit"
                        class="btn btn-outline-danger btn-lg m-1 w-100" @onclick="DeleteLegal"> Удалить
                </button>
            }

        </div>
    }
</div>

@code {
    [Inject] public IScenarioService ScenarioService { get; set; } = null!;
    [Inject] public ISecurityService SecurityService { get; set; } = null!;
    [Inject] public IPersonalService PersonalService { get; set; } = null!;
    [Inject] public IAddressService AddressService { get; set; } = null!;
    [Inject] public IBankService BankService { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;
    [Inject] public IJSRuntime JsRuntime { get; set; } = null!;

    public IAuthResult? AuthResult { get; set; }

    public IList<ILegal> LegalList { get; set; } = [];
    public IList<IBank> Banks { get; set; } = [];
    public IList<ICity> Cities { get; set; } = [];
    public IList<IStreet> Streets { get; set; } = [];
    public ILegal? SelectedLegal { get; set; }
    public LegalModel Model { get; set; } = new();

    public bool IsAdd { get; set; }

    public string Route = ServiceRoutes.Clients.Legal;

    protected override async Task OnInitializedAsync()
    {
        AuthResult = await ScenarioService.TryAuthenticateUserAsync(tryRefreshToken: true, redirectToLogin: true);

        if (AuthResult == null)
            NavigationManager.NavigateTo(ServiceRoutes.Home);
        else
        {
            if (!await SecurityService.IsManagementAsync())
            {
                NavigationManager.NavigateTo(ServiceRoutes.Home);
                return;
            }

            Banks = await BankService.GetBanksAsync();
            Streets = await AddressService.GetStreetsAsync();
            Cities = await AddressService.GetCitiesAsync();
            LegalList = await PersonalService.GetLegalsAsync();

            await base.OnInitializedAsync();
        }
    }

    private void SelectLegal(ILegal legal)
    {
        SelectedLegal = legal;
        Model = new()
        {
            Id = SelectedLegal.Id,
            Name = SelectedLegal.Name,
            BankId = legal.Bank.Id,
            CityId = legal.City.Id,
            StreetId = legal.Street.Id,
            Account = legal.Account,
            TIN = legal.TIN,
            CompanyName = legal.CompanyName,
            HouseNumber = legal.HouseNumber,
            OfficeNumber = legal.OfficeNumber,
            Surname = legal.Surname,
            Patronymic = legal.Patronymic,
            Phone = legal.Phone
        };
        StateHasChanged();
    }

    private void AddLegal()
    {
        IsAdd = true;
        SelectedLegal = null;
        Model = new()
        {
            BankId = 1,
            StreetId = 1,
            CityId = 1
        };
        StateHasChanged();
    }

    private async Task EditLegal()
    {
        var auth = await ScenarioService.TryAuthenticateUserAsync(tryRefreshToken: true, redirectToLogin: true);
        if (auth == null)
        {
            NavigationManager.NavigateTo(ServiceRoutes.Home);
            return;
        }

        if (SelectedLegal != null || SelectedLegal == null)
        {
            NavigationManager.NavigateTo(ServiceRoutes.Home);
            return;
        }

        bool result = await JsRuntime.InvokeAsync<bool>("confirm", "Вы уверены?");
        if (result)
        {
            var isEdited = await PersonalService.AddOrUpdateLegalAsync(Model);
            if (!isEdited)
                await JsRuntime.InvokeAsync<object>("alert", "Ошибка при изменении");

            NavigationManager.NavigateTo(Route, true);
        }
    }

    private async Task DeleteLegal()
    {
        if (SelectedLegal != null)
        {
            var auth = await ScenarioService.TryAuthenticateUserAsync(tryRefreshToken: true, redirectToLogin: true);
            if (auth == null || !await SecurityService.IsManagementAsync())
            {
                NavigationManager.NavigateTo(ServiceRoutes.Home);
                return;
            }

            bool result = await JsRuntime.InvokeAsync<bool>("confirm", "Вы уверены?");
            if (result)
            {
                var isDeleted = await PersonalService.DeleteLegalAsync(SelectedLegal.Id);
                if (!isDeleted)
                    await JsRuntime.InvokeAsync<object>("alert", "Ошибка при удалении");

                NavigationManager.NavigateTo(Route, true);
            }
        }
    }

}