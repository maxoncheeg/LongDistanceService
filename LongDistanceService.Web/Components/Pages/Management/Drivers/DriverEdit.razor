@using LongDistanceService.Domain.Models.Abstract
@using LongDistanceService.Domain.Models.Abstract.Drivers
@using LongDistanceService.Domain.Services.Abstract
@using LongDistanceService.Web.Models.Drivers
@using LongDistanceService.Web.Models.Scenario.Abstract
@using LongDistanceService.Web.Routes
@using LongDistanceService.Web.Services.Abstract
@attribute [Route(ServiceRoutes.Drivers.Route)]

@rendermode InteractiveServer


<div class="box">
    <div class="driverBox">
        <h3>Водители</h3>
        @if(UserRights is { Write: true })
        {
            <button class="btn btn-info btn-lg" @onclick="AddDriver">Добавить</button>
        }
        
        <div class="driverList">
            <ol class="list-group list-group-numbered">
                @foreach (var driver in Drivers)
                {
                    <button @onclick="@(() => ChooseDriver(driver.Id))" class='@(DriverModel.Id == driver.Id ? "active" : "") list-group-item d-flex justify-content-between align-items-start list-group-item list-group-item-action'>
                        <div class="ms-2 me-auto">
                            <div class="fw-bold">@driver.FullName</div>
                            Годы стажа: @driver.Experience
                            <br>
                            Табельный номер: @driver.EmployeeNumber
                        </div>
                        <span
                            class='badge text-bg-primary rounded-pill experience @(driver.InWork ? "inWork" : "free")'>Категория @driver.CategoryName</span>
                    </button>
                }
            </ol>
        </div>
    </div>

    <div class="driverBox">
        @if (IsEdit && (UserRights is {Write: true} && Driver == null || UserRights is { Edit: true} && Driver != null))
        {
            <EditForm Model="DriverModel" FormName="editDriver" method="post" OnValidSubmit="EditDriver">
                <DataAnnotationsValidator/>
                
                <h6 class="c-g">Модель</h6>
                <InputSelect class="form-select" @bind-Value="DriverModel.CategoryId">
                    @for (int i = 0; i < Categories.Count; i++)
                    {
                        @if (Driver != null && Categories[i].Id == Driver.Category.Id || Driver == null && i == 0)
                        {
                            <option selected="selected" value="@Categories[i].Id">@Categories[i].Name</option>
                        }
                        else
                        {
                            <option value="@Categories[i].Id">@Categories[i].Name</option>
                        }
                    }
                </InputSelect>
                <br>

                <h6 class="c-g">Имя</h6>
                <InputText class="form-control"
                           @bind-Value="@DriverModel.Name">@DriverModel.Name</InputText>
                <ValidationMessage For="() => DriverModel.Name" class="text-danger"/>
                <br>
                <h6 class="c-g">Фамилия</h6>
                <InputText class="form-control"
                           @bind-Value="@DriverModel.Surname">@DriverModel.Surname</InputText>
                <ValidationMessage For="() => DriverModel.Surname" class="text-danger"/>
                <br>
                <h6 class="c-g">Отчество</h6>
                <InputText class="form-control"
                           @bind-Value="@DriverModel.Patronymic">@DriverModel.Patronymic</InputText>
                <ValidationMessage For="() => DriverModel.Patronymic" class="text-danger"/>
                <br>

                <h6 class="c-g">Год рождения</h6>
                <InputNumber class="form-control" TValue="int"
                             @bind-Value="@DriverModel.BirthYear">@DriverModel.BirthYear</InputNumber>
                <ValidationMessage For="() => DriverModel.BirthYear" class="text-danger"/>
                <br>

                <h6 class="c-g">Годы стажа</h6>
                <InputNumber class="form-control" TValue="int"
                             @bind-Value="@DriverModel.Experience">@DriverModel.Experience</InputNumber>
                <ValidationMessage For="() => DriverModel.Experience" class="text-danger"/>
                <br>

                <h6 class="c-g">Класс водителя</h6>
                <InputText class="form-control"
                           @bind-Value="@DriverModel.Class">@DriverModel.Class</InputText>
                <ValidationMessage For="() => DriverModel.Class" class="text-danger"/>
                <br>


                <h6 class="c-g">Табельный номер</h6>
                <InputText class="form-control"
                           @bind-Value="@DriverModel.EmployeeNumber">@DriverModel.EmployeeNumber</InputText>
                <ValidationMessage For="() => DriverModel.EmployeeNumber" class="text-danger"/>
                <br>

                <button type="submit" class="btn btn-dark btn-lg">@(Driver == null ? "Добавить" : "Редактировать")</button>
            </EditForm>
            
            @if(UserRights is { Delete: true } && Driver != null)
            {
                <button class="btn btn-info btn-lg" @onclick="DeleteDriver">Удалить</button>
            }
        }
    </div>
</div>

@code {
    [Inject] public IScenarioService ScenarioService { get; set; } = null!;
    [Inject] public ISecurityService SecurityService { get; set; } = null!;
    [Inject] public IDriverService DriverService { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;
    [Inject] public IJSRuntime JsRuntime { get; set; } = null!;

    public IAuthResult? AuthResult { get; set; }
    public IUserRights? UserRights { get; set; }

    public IList<IDriverCategory> Categories { get; set; } = [];
    public IList<IDriverInfo> Drivers { get; set; } = [];
    public IDriver? Driver { get; set; }
    public DriverModel DriverModel { get; set; } = new();
    
    public bool IsEdit { get; set; }


    protected override async Task OnInitializedAsync()
    {
        AuthResult = await ScenarioService.TryAuthenticateUserAsync(tryRefreshToken: true, redirectToLogin: true);

        if (AuthResult == null)
            NavigationManager.NavigateTo(ServiceRoutes.Home);
        else
        {
            UserRights = await SecurityService.GetUserRightsToPageAsync(AuthResult.User, ServiceRoutes.Vehicles.Route);

            if (UserRights == null || !UserRights.Read)
                NavigationManager.NavigateTo(ServiceRoutes.Home);

            Drivers = await DriverService.GetDriversAsync();
            Categories = await DriverService.GetDriverCategoriesAsync();

            await base.OnInitializedAsync();
        }
    }

    public async Task ChooseDriver(int id)
    {
        IsEdit = true;
        
        Driver = await DriverService.GetDriverAsync(id);
        Categories = await DriverService.GetDriverCategoriesAsync();
        
        if (Driver != null)
        {
            DriverModel = new DriverModel
            {
                Id = Driver.Id,
                BirthYear = Driver.BirthYear,
                Experience = Driver.Experience,
                Name = Driver.Name,
                Surname = Driver.Surname,
                Patronymic = Driver.Patronymic,
                CategoryId = Driver.Category.Id,
                Class = Driver.Class,
                EmployeeNumber = Driver.EmployeeNumber
            };
        }
        
        StateHasChanged();
    }
    
    public async Task AddDriver()
    {
        IsEdit = true;
        Categories = await DriverService.GetDriverCategoriesAsync();
        Driver = null;
        DriverModel = new()
        {
            CategoryId = Categories.First().Id
        };
        StateHasChanged();
    }

    public async Task DeleteDriver()
    {
        if (Driver != null)
        {
            bool result = await JsRuntime.InvokeAsync<bool>("confirm", "Вы уверены?");
            if (result)
            {
                var isDeleted = await DriverService.DeleteDriverAsync(Driver.Id);
                if (!isDeleted)
                    await JsRuntime.InvokeAsync<object>("alert", "Ошибка при удалении");

                NavigationManager.NavigateTo(ServiceRoutes.Drivers.Route, true);
            }
        }
    }

    public async Task EditDriver()
    {
        bool result = await JsRuntime.InvokeAsync<bool>("confirm", "Вы уверены?");
        if (result)
        {
            var isEdited = await DriverService.AddOrUpdateDriverAsync(DriverModel);
            if(!isEdited)
                await JsRuntime.InvokeAsync<object>("alert", "Ошибка при изменении");
            
            NavigationManager.NavigateTo(ServiceRoutes.Drivers.Route, true);
        }
    }
}