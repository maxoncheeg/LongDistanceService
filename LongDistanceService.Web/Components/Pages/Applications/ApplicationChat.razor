@using LongDistanceService.Web.Routes
@using LongDistanceService.Domain.Models.Abstract
@using LongDistanceService.Domain.Services.Abstract
@using LongDistanceService.Web.Models.Applications
@using LongDistanceService.Web.Models.Scenario.Abstract
@using LongDistanceService.Web.Services.Abstract
@attribute [Route(ServiceRoutes.Application.Chat)]

<div class="box">
    <div class="titleBox">
        <h2>Заявка №@Application?.Id</h2>
    </div>

    <div class="chatBox" id="chatBox">
        @if (Application != null)
        {
            @foreach (var message in Application.Messages)
            {
                bool currentUser = AuthResult?.User.Id == message.UserId;
                <div class='messageRow @(currentUser ? "toRight" : "toLeft")'>
                    <div class='message @(currentUser ? "bg-darkgreen rightBorder" : "bg-gray leftBorder")'>
                        <p class="c-w">@message.Text</p>
                        <p class="c-w">@message.Timestamp</p>
                    </div>
                </div>
            }
        }
    </div>

    <div class="buttonBox">
        <EditForm class="login-form row g-3" Model="Model" method="post" OnValidSubmit="SendMessage" FormName="sendMessage">
            <div class="col-auto">
                <label for="inputPassword2" class="visually-hidden">Сообщение</label>
                <InputTextArea @bind-Value="Model.Text" class="form-control" rows="2"/>
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-dark mb-3">Отправить</button>
            </div>
        </EditForm>

        @if (IsAdmin)
        {
            <form class="row g-3" method="post" @onsubmit="Finish" @formname="finishApplication">\
                <AntiforgeryToken></AntiforgeryToken>
                <button type="submit" class="btn btn-lg btn-danger">ЗАВЕРШИТЬ ЗАЯВКУ</button>
            </form>
        }
    </div>
</div>

<script>
    let box = document.getElementById("chatBox");
    box.scrollTop = box.scrollHeight;
</script>

@code {
    [Parameter] public string Id { get; set; } = null!;
    [SupplyParameterFromForm(FormName = "sendMessage")] public ApplicationModel Model { get; set; } = new();
    [SupplyParameterFromForm(FormName = "finishApplication")] public FinishApplicationModel FinishModel { get; set; } = new();
    public EditContext Context = new EditContext(new object());

    [Inject] public IApplicationService ApplicationService { get; set; } = null!;
    [Inject] public IScenarioService ScenarioService { get; set; } = null!;
    [Inject] public ISecurityService SecurityService { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;

    public IAuthResult? AuthResult { get; set; } = null;
    public IApplication? Application { get; set; }
    public bool IsUserChat => Application?.CreatorId == AuthResult?.User.Id;
    public bool IsAdmin { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthResult = await ScenarioService.TryAuthenticateUserAsync(ServiceRoutes.Application.List, redirectToLogin: true);

        if (AuthResult != null)
        {
            if (!int.TryParse(Id, out var applicationId))
            {
                NavigationManager.NavigateTo(ServiceRoutes.Codes.NotFound);
                return;
            }

            IsAdmin = await SecurityService.IsAdminAsync(AuthResult.User);
            Application = await ApplicationService.GetApplicationWithMessagesAsync(applicationId);

            if (Application?.CreatorId != AuthResult?.User.Id && !IsAdmin)
            {
                NavigationManager.NavigateTo(ServiceRoutes.Codes.NotFound);
                return;
            }
        }

        await base.OnInitializedAsync();
    }

    public async Task SendMessage()
    {
        if (AuthResult != null && Application != null)
        {
            await ApplicationService.SendMessageAsync(Application.Id, AuthResult.User.Id, Model.Text);
            NavigationManager.NavigateTo(ServiceRoutes.Application.Route + '/' + Id);
        }
    }
    
    public async Task Finish()
    {
        if (AuthResult != null && Application != null)
        {
            await ApplicationService.FinishApplicationAsync(Application.Id);
            NavigationManager.NavigateTo(ServiceRoutes.Application.List);
        }
    }

}