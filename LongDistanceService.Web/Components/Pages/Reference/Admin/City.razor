@using LongDistanceService.Domain.Models.Abstract
@using LongDistanceService.Domain.Models.Abstract.Addresses
@using LongDistanceService.Domain.Services.Abstract
@using LongDistanceService.Web.Models.Addresses
@using LongDistanceService.Web.Models.Scenario.Abstract
@using LongDistanceService.Web.Routes
@using LongDistanceService.Web.Services.Abstract

@attribute [Route(ServiceRoutes.Reference.City)]
@rendermode InteractiveServer

<style>
    .refBox {
        height: 100vh;
        text-align: center;
        padding: 20px;
    }

    .refList {
        width: 80%;
        margin: auto;
        height: 45%;
        overflow-y: auto;
    }
</style>

<div class="refBox justify-content-center">
    <h3>ГОРОДА</h3>
    <div class="refList">
        <table class="table table-hover">
            <thead>
            <tr>
                <th scope="col">ID</th>
                <th scope="col">Название</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var city in Cities)
            {
                <tr @onclick="@(() => SelectCity(city))">
                    <th scope="row">@city.Id</th>
                    <td>@city.Name</td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    @if (UserRights is { Write: true })
    {
        <button class="btn btn-lg btn-info m-2 w-75" @onclick="AddCity"> Новый город</button>
    }

    @if (UserRights is { Edit: true } && SelectedCity != null || UserRights is { Write: true } && SelectedCity == null && IsAdd)
    {
        <div class="justify-content-center w-75 m-auto">
            <EditForm Model="Model" method="post" FormName="cityEdit" OnValidSubmit="EditCity">
                <DataAnnotationsValidator/>
                <h6 class="c-g"> Название </h6>
                <InputText class="form-control w-25 m-auto"
                           @bind-Value="@Model.Name"> @Model.Name </InputText>
                <ValidationMessage For="() => Model.Name" class="text-danger"/>
                <br>
                <button type="submit"
                        class="btn btn-dark btn-lg">@(SelectedCity == null ? "Добавить" : "Редактировать") </button>
            </EditForm>
            @if (UserRights is { Delete: true } && SelectedCity != null)
            {
                <button type="submit"
                        class="btn btn-danger btn-lg m-1" @onclick="DeleteCity"> Удалить
                </button>
            }

        </div>
    }
</div>

@code {
    [Inject] public IScenarioService ScenarioService { get; set; } = null!;
    [Inject] public ISecurityService SecurityService { get; set; } = null!;
    [Inject] public IAddressService AddressService { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;
    [Inject] public IJSRuntime JsRuntime { get; set; } = null!;

    public IAuthResult? AuthResult { get; set; }
    public IUserRights? UserRights { get; set; }

    public IList<ICity> Cities { get; set; } = [];
    public ICity? SelectedCity { get; set; }
    public CityModel Model { get; set; } = new();

    public bool IsAdd { get; set; }

    public string Route = ServiceRoutes.Reference.City;


    protected override async Task OnInitializedAsync()
    {
        AuthResult = await ScenarioService.TryAuthenticateUserAsync(tryRefreshToken: true, redirectToLogin: true);

        if (AuthResult == null)
            NavigationManager.NavigateTo(ServiceRoutes.Home);
        else
        {
            UserRights = await SecurityService.GetUserRightsToPageAsync(AuthResult.User, Route);

            if (UserRights == null || !UserRights.Read)
            {
                NavigationManager.NavigateTo(ServiceRoutes.Home);
                return;
            }

            Cities = await AddressService.GetCitiesAsync();

            await base.OnInitializedAsync();
        }
    }

    public void SelectCity(ICity city)
    {
        SelectedCity = city;
        Model = new()
        {
            Id = SelectedCity.Id,
            Name = SelectedCity.Name
        };
        StateHasChanged();
    }

    public void AddCity()
    {
        IsAdd = true;
        SelectedCity = null;
        Model = new();
        StateHasChanged();
    }

    private async Task EditCity()
    {
        var auth = await ScenarioService.TryAuthenticateUserAsync(tryRefreshToken: true, redirectToLogin: true);
        if (auth == null)
        {
            NavigationManager.NavigateTo(ServiceRoutes.Home);
            return;
        }

        var rights = await SecurityService.GetUserRightsToPageAsync(auth.User, Route);
        if (rights is { Edit: false } && SelectedCity != null || rights is { Write: false } && SelectedCity == null)
        {
            NavigationManager.NavigateTo(ServiceRoutes.Home);
            return;
        }

        bool result = await JsRuntime.InvokeAsync<bool>("confirm", "Вы уверены?");
        if (result)
        {
            var isEdited = await AddressService.AddOrUpdateCityAsync(Model);
            if (!isEdited)
                await JsRuntime.InvokeAsync<object>("alert", "Ошибка при изменении");

            NavigationManager.NavigateTo(Route, true);
        }
    }

    public async Task DeleteCity()
    {
        if (SelectedCity != null)
        {
            var auth = await ScenarioService.TryAuthenticateUserAsync(tryRefreshToken: true, redirectToLogin: true);
            if (auth == null)
            {
                NavigationManager.NavigateTo(ServiceRoutes.Home);
                return;
            }

            var rights = await SecurityService.GetUserRightsToPageAsync(auth.User, Route);
            if (rights is { Delete: false })
            {
                NavigationManager.NavigateTo(ServiceRoutes.Home);
                return;
            }

            bool result = await JsRuntime.InvokeAsync<bool>("confirm", "Вы уверены?");
            if (result)
            {
                var isDeleted = await AddressService.DeleteCityAsync(SelectedCity.Id);
                if (!isDeleted)
                    await JsRuntime.InvokeAsync<object>("alert", "Ошибка при удалении");

                NavigationManager.NavigateTo(Route, true);
            }
        }
    }

}