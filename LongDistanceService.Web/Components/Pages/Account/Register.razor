@using LongDistanceService.Domain.Enums
@using LongDistanceService.Domain.Services.Abstract
@using LongDistanceService.Web.Components.Layout
@using LongDistanceService.Web.Models.Identity
@using LongDistanceService.Web.Routes
@using LongDistanceService.Web.Services.Abstract
@attribute [Route(ServiceRoutes.Identity.Register)]

@layout EmptyLayout

<PageTitle>Регистрация</PageTitle>

<div>
    <div class="intro"></div>
    <image class="media" src="res/trucker.gif" autoplay muted loop></image>
    
    <div class="shell">
        <div class="login">
            <div class="loginTitle loginText">
                <h1>ГРУЗОВЫЕ АВТОПЕРЕВОЗКИ</h1>
            </div>

            <div class="loginCenter">
                <div class="loginCenterLogo">
                    <img src="res/stollenlogo.png" alt="no"/>
                </div>
                <div class="loginCenterForm loginText">

                    <EditForm class="login-form w-100" Model="Model" method="post" OnValidSubmit="RegisterUser" FormName="register">
                        <DataAnnotationsValidator/>
                        @* <ValidationSummary class="text-danger" role="alert"/> *@
                        <div>
                            <h3 class="loginText" style="color:aliceblue">РЕГИСТРАЦИЯ</h3>
                        </div>
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Model.Email" class="form-control" aria-required="true" placeholder="name@example.com"/>
                            <label for="email" class="form-label">Почта</label>
                            <ValidationMessage For="() => Model.Email" class="text-danger"/>
                        </div>
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Model.Password" class="form-control" aria-required="true" placeholder="password"/>
                            <label for="password" class="form-label">Пароль</label>
                            <ValidationMessage For="() => Model.Password" class="text-danger"/>
                        </div>
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Model.PasswordRepeat" class="form-control" aria-required="true" placeholder="password"/>
                            <label for="passwordRepeat" class="form-label">Повторите пароль</label>
                            <ValidationMessage For="() => Model.PasswordRepeat" class="text-danger"/>
                        </div>
                        <div>
                            <button type="submit" class="w-100 btn btn-dark btn-lg">Создать аккаунт</button>
                        </div>
                    </EditForm>
                </div>
                <div class="loginCenterSocial loginText">
                    <h4>входи через ВТентакли</h4>
                </div>
            </div>

            <div class="loginFooter loginText">
                <h5>сайт мистера максонелиуса 2k24</h5>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string Type { get; set; } = string.Empty;
    [SupplyParameterFromForm] public RegisterUserModel Model { get; set; } = new();

    [Inject] public IIdentityService IdentityService { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;
    [Inject] public IScenarioService ScenarioService { get; set; } = null!;
    [Inject] public IUserService UserService { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var result = await ScenarioService.TryAuthenticateUserAsync(returnUrl: string.Empty, tryRefreshToken: true, redirectToLogin: false);
        
        if (result != null)
            NavigationManager.NavigateTo(ServiceRoutes.Home);
    }

    public async Task RegisterUser()
    {
        if (Model.Password.Equals(Model.PasswordRepeat))
        {
            if (await UserService.CreateUserAsync(Model.Email, Model.Password, UserRole.Guest))
            {
                NavigationManager.NavigateTo(ServiceRoutes.Identity.Login);
            }
            else
            {
                NavigationManager.NavigateTo(ServiceRoutes.Identity.Register);
            }
        }
        else
        {
            NavigationManager.NavigateTo(ServiceRoutes.Identity.Register);
            return;
        }
    }

}