@attribute [Route(template: ServiceRoutes.Identity.ChangePassword)]
@using LongDistanceService.Domain.Services.Abstract
@using LongDistanceService.Web.Models.Identity
@using LongDistanceService.Web.Components.Layout
@using LongDistanceService.Web.Models.Scenario.Abstract
@using LongDistanceService.Web.Routes
@using LongDistanceService.Web.Services.Abstract

@rendermode InteractiveServer
@layout EmptyLayout

<PageTitle>Login</PageTitle>

<div>
    <div class="intro"></div>
    <image class="media" src="res/road.jpg" autoplay muted loop></image>
    

    <div class="shell">
        <div class="login">
            <div class="loginTitle loginText">
                <h1>ГРУЗОВЫЕ АВТОПЕРЕВОЗКИ</h1>
            </div>

            <div class="loginCenter">
                <div class="loginCenterLogo">
                    <img src="https://lucaclinic.ru/bitrix/templates/main/planeta.png" alt="no"/>
                </div>
                <div class="loginCenterForm loginText">

                    <EditForm class="login-form" Model="Input" method="post" OnValidSubmit="SetNewPassword"
                              FormName="login">
                        <DataAnnotationsValidator/>
                        @* <ValidationSummary class="text-danger" role="alert"/> *@
                        <div>
                            <h3 class="loginText" style="color:aliceblue">Смена пароля</h3>
                        </div>
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.OldPassword" class="form-control"
                                       aria-required="true" placeholder="password"/>
                            <label for="password" class="form-label">Старый пароль</label>
                            <ValidationMessage For="() => Input.OldPassword" class="text-danger"/>
                        </div>
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.NewPassword" class="form-control"
                                       aria-required="true" placeholder="password"/>
                            <label for="password" class="form-label">Новый пароль</label>
                            <ValidationMessage For="() => Input.NewPassword" class="text-danger"/>
                        </div>

                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control"
                                       aria-required="true" placeholder="password"/>
                            <label for="password" class="form-label">Повторите пароль</label>
                            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/>
                        </div>
                        <div>
                            <button type="submit" class="w-100 btn btn-dark btn-lg">Сменить пароль</button>
                        </div>
                    </EditForm>
                </div>
            </div>

            <div class="loginFooter loginText">
                <h5>сайт мистера максонелиуса 2k24</h5>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery] public string? ReturnUrl { get; set; }
    [SupplyParameterFromForm] public ChangePasswordModel Input { get; set; } = new();

    [Inject] public IIdentityService IdentityService { get; set; } = null!;
    [Inject] public IUserService UserService { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;
    [Inject] public IScenarioService ScenarioService { get; set; } = null!;
    [Inject] public IJSRuntime JsRuntime { get; set; } = null!;

    public IAuthResult? AuthResult { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthResult = await ScenarioService.TryAuthenticateUserAsync(tryRefreshToken: true, redirectToLogin: true);

        if (AuthResult == null)
        {
            NavigationManager.NavigateTo(ServiceRoutes.Home);
            await base.OnInitializedAsync();
        }
    }

    public async Task SetNewPassword()
    {
        if (AuthResult != null)
        {
            var result = await UserService.ChangePasswordAsync(AuthResult.User.Id, Input.OldPassword, Input.NewPassword);
            if (result)
            {
                NavigationManager.NavigateTo(ServiceRoutes.Home);
            }
            else
            {
                await JsRuntime.InvokeAsync<object>("alert", "Не удалось сменить пароль");
            }
        }
    }

}