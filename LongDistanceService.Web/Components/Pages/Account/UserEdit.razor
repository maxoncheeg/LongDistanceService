@using LongDistanceService.Domain.Models.Abstract
@using LongDistanceService.Domain.Models.Abstract.Users
@using LongDistanceService.Domain.Services.Abstract
@using LongDistanceService.Web.Models.Identity
@using LongDistanceService.Web.Models.Scenario.Abstract
@using LongDistanceService.Web.Routes
@using LongDistanceService.Web.Services.Abstract

@attribute [Route(ServiceRoutes.Identity.UserEdit)]
@rendermode InteractiveServer

<style>
    .refBox {
        text-align: center;
        padding: 10px;
    }

    .refList {
        width: 95%;
        margin: auto;
        height: 400px;
        overflow-y: auto;
    }

    .inputs {
        display: flex;
        flex-wrap: wrap;
        flex-direction: row;
        justify-content: center;
    }

    .w-20 {
        width: 25%;
        margin: 5px;
    }

</style>

<div class="refBox justify-content-center">
    <h3>Пользователи</h3>
    <div class="refList">
        <table class="table table-hover">
            <thead>
            <tr>
                <th scope="col">Имя и фамилия</th>
                <th scope="col">Логин</th>
                <th scope="col">Роль</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var user in Users)
            {
                <tr @onclick="@(() => SelectUser(user))">
                    <th scope="row">@($"{user.Surname} {user.Name}")</th>
                    <td>@user.Login</td>
                    <td>@user.Role.Name</td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    @if (UserRights is { Edit: true } && SelectedUser != null || UserRights is { Write: true } && SelectedUser == null && IsAdd)
    {
        <div class="justify-content-center w-75 m-auto">
            <EditForm Model="Model" class="inputs" method="post" FormName="userEdit" OnSubmit="EditUser">
                <DataAnnotationsValidator/>
                <div class="w-20">
                    <h6 class="c-g"> Имя </h6>
                    <InputText class="form-control  m-auto"
                               @bind-Value="@Model.Name"> @Model.Name </InputText>
                    <ValidationMessage For="() => Model.Name" class="text-danger"/>
                    <br>
                </div>
                <div class="w-20">
                    <h6 class="c-g"> Фамилия </h6>
                    <InputText class="form-control  m-auto"
                               @bind-Value="@Model.Surname"> @Model.Surname </InputText>
                    <ValidationMessage For="() => Model.Surname" class="text-danger"/>
                    <br>
                </div>
                <div class="w-20">
                    <h6 class="c-g"> Логин </h6>
                    <InputText class="form-control  m-auto"
                               @bind-Value="@Model.Login"> @Model.Login </InputText>
                    <ValidationMessage For="() => Model.Login" class="text-danger"/>
                    <br>
                </div>
                <div class="w-20">
                    <h6 class="c-g">Роль</h6>
                    <InputSelect class="form-select  m-auto" @bind-Value="Model.Role.Id">
                        @for (int i = 0; i < Roles.Count; i++)
                        {
                            @if (SelectedUser != null && Roles[i].Id == Model.Role.Id || SelectedUser == null && i == 0)
                            {
                                <option selected="selected" value="@Roles[i].Id">@Roles[i].Name</option>
                            }
                            else
                            {
                                <option value="@Roles[i].Id">@Roles[i].Name</option>
                            }
                        }
                    </InputSelect>
                    <br>
                </div>
                <button type="submit"
                        class="btn btn-dark btn-lg w-100">Редактировать</button>
            </EditForm>
            @if (UserRights is { Delete: true } && SelectedUser != null)
            {
                <button type="submit"
                        class="btn btn-outline-danger btn-lg m-1 w-100" @onclick="DeleteIndividual"> Удалить
                </button>
            }

        </div>
    }
</div>

@code {
    [Inject] public IScenarioService ScenarioService { get; set; } = null!;
    [Inject] public ISecurityService SecurityService { get; set; } = null!;
    [Inject] public IUserService UserService { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;
    [Inject] public IJSRuntime JsRuntime { get; set; } = null!;

    public IAuthResult? AuthResult { get; set; }
    public IUserRights? UserRights { get; set; }

    public IList<IUser> Users { get; set; } = [];
    public IList<IRole> Roles { get; set; } = [];
    public IUser? SelectedUser { get; set; }
    public CreateUserModel Model { get; set; } = new();

    public bool IsAdd { get; set; }

    public string Route = ServiceRoutes.Identity.UserEdit;

    protected override async Task OnInitializedAsync()
    {
        AuthResult = await ScenarioService.TryAuthenticateUserAsync(tryRefreshToken: true, redirectToLogin: true);

        if (AuthResult == null)
            NavigationManager.NavigateTo(ServiceRoutes.Home);
        else
        {
            UserRights = await SecurityService.GetUserRightsToPageAsync(AuthResult.User, Route);

            if (UserRights == null || !UserRights.Read)
            {
                NavigationManager.NavigateTo(ServiceRoutes.Home);
                return;
            }
            
            Users = await UserService.GetUsers();
            Roles = await UserService.GetRoles();
            var firstOrDefault = Users.FirstOrDefault(u => u.Id == AuthResult.User.Id);
            if (firstOrDefault != null)
                Users.Remove(firstOrDefault);

            await base.OnInitializedAsync();
        }
    }

    public void SelectUser(IUser user)
    {
        SelectedUser = user;
        Model = new()
        {
            Id = SelectedUser.Id,
            Name = SelectedUser.Name,
            Surname = user.Surname,
            Login = user.Login,
            Role = user.Role
        };
        StateHasChanged();
    }

    // public void AddIndividual()
    // {
    //     IsAdd = true;
    //     SelectedUser = null;
    //     Model = new();
    //     StateHasChanged();
    // }

    private async Task EditUser()
    {
        var auth = await ScenarioService.TryAuthenticateUserAsync(tryRefreshToken: true, redirectToLogin: true);
        if (auth == null)
        {
            NavigationManager.NavigateTo(ServiceRoutes.Home);
            return;
        }
        
        
        var rights = await SecurityService.GetUserRightsToPageAsync(auth.User, Route);
        if (rights is { Edit: false } && SelectedUser != null || rights is { Write: false } && SelectedUser == null)
        {
            NavigationManager.NavigateTo(ServiceRoutes.Home);
            return;
        }

        bool result = await JsRuntime.InvokeAsync<bool>("confirm", "Вы уверены?");
        if (result)
        {
            var isEdited = await UserService.UpdateUser(Model);
            if (!isEdited)
                await JsRuntime.InvokeAsync<object>("alert", "Ошибка при изменении");

            NavigationManager.NavigateTo(Route, true);
        }
    }

    public async Task DeleteIndividual()
    {
        if (SelectedUser != null)
        {
            var auth = await ScenarioService.TryAuthenticateUserAsync(tryRefreshToken: true, redirectToLogin: true);
            if (auth == null)
            {
                NavigationManager.NavigateTo(ServiceRoutes.Home);
                return;
            }

            var rights = await SecurityService.GetUserRightsToPageAsync(auth.User, Route);
            if (rights is { Delete: false })
            {
                NavigationManager.NavigateTo(ServiceRoutes.Home);
                return;
            }

            bool result = await JsRuntime.InvokeAsync<bool>("confirm", "Вы уверены?");
            if (result)
            {
                var isDeleted = await UserService.DeleteUser(SelectedUser.Id);
                if (!isDeleted)
                    await JsRuntime.InvokeAsync<object>("alert", "Ошибка при удалении");

                NavigationManager.NavigateTo(Route, true);
            }
        }
    }

}