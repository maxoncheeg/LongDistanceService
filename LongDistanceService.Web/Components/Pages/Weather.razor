@page "/weather"
@attribute [StreamRendering]
@using Microsoft.AspNetCore.Authentication
@using LongDistanceService.Web.Routes
@using LongDistanceService.Web.Services.Abstract

<PageTitle>Weather</PageTitle>

<h1>Weather для шоколадного @Name</h1>
<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

<form method="post" @onsubmit="LogOut" Context="lol" @formname="logout">
    <button type="submit" class="w-100 btn btn-lg btn-primary">LOG OUT</button>
    <AntiforgeryToken/>
</form>


@code {
    [SupplyParameterFromForm] public EmptyModel Empty { get; set; } = new();

    [Inject] public NavigationManager NavigationManager { get; set; } = null!;
    [Inject] public IIdentityService IdentityService { get; set; } = null!;
    [Inject] public IScenarioService ScenarioService { get; set; } = null!;

    public string Name { get; set; } = string.Empty;

    public class EmptyModel
    {
    }

    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering

        var result = await ScenarioService.TryAuthenticateUserAsync(returnUrl: NavigationManager.Uri, redirectToLogin: true);
        Name = result.User.Login;

        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    public async Task LogOut()
    {
        await IdentityService.SignOutAsync();
        NavigationManager.NavigateTo(ServiceRoutes.Home);
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

}