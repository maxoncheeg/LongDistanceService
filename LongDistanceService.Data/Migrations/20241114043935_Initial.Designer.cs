// <auto-generated />
using System;
using LongDistanceService.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LongDistanceService.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241114043935_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LongDistanceService.Data.Entities.Addresses.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("сities", (string)null);
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Addresses.Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("streets", (string)null);
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Cargoes.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("cargoes", (string)null);
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Cargoes.CargoCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_id");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("cargo_categories", (string)null);
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Cargoes.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("units", (string)null);
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Drivers.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BirthYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2004)
                        .HasColumnName("birth_year");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Class")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("0")
                        .HasColumnName("class");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("employee_number");

                    b.Property<int>("Experience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("experience");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("patronymic");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("surname");

                    b.HasKey("Id");

                    b.HasAlternateKey("EmployeeNumber");

                    b.HasIndex("CategoryId");

                    b.ToTable("drivers", null, t =>
                        {
                            t.HasCheckConstraint("CK_experience", "experience > 0 OR experience = 0");
                        });
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Drivers.DriverCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("driver_categories", (string)null);
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Identity.MenuTab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DllName")
                        .HasColumnType("text")
                        .HasColumnName("dll");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("function");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.HasKey("Id");

                    b.ToTable("menu_tabs", (string)null);
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Identity.MenuTabRight", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("MenuTabId")
                        .HasColumnType("integer")
                        .HasColumnName("tab_id");

                    b.Property<bool>("D")
                        .HasColumnType("boolean")
                        .HasColumnName("d");

                    b.Property<bool>("E")
                        .HasColumnType("boolean")
                        .HasColumnName("e");

                    b.Property<bool>("R")
                        .HasColumnType("boolean")
                        .HasColumnName("r");

                    b.Property<bool>("W")
                        .HasColumnType("boolean")
                        .HasColumnName("w");

                    b.HasKey("UserId", "MenuTabId");

                    b.ToTable("menu_tab_rights", (string)null);
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("LoadingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("loading_date");

                    b.Property<int>("ReceiveCityId")
                        .HasColumnType("integer")
                        .HasColumnName("receive_city_id");

                    b.Property<string>("ReceiveHouseNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("receive_house_number");

                    b.Property<int>("ReceiveStreetId")
                        .HasColumnType("integer")
                        .HasColumnName("receive_street_id");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer")
                        .HasColumnName("receiver_id");

                    b.Property<int>("ReceiverType")
                        .HasColumnType("integer")
                        .HasColumnName("sender_type");

                    b.Property<decimal>("RouteLength")
                        .HasPrecision(9, 2)
                        .HasColumnType("numeric(9,2)")
                        .HasColumnName("route_length");

                    b.Property<int>("SendCityId")
                        .HasColumnType("integer")
                        .HasColumnName("send_city_id");

                    b.Property<string>("SendHouseNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("send_house_number");

                    b.Property<int>("SendStreetId")
                        .HasColumnType("integer")
                        .HasColumnName("send_street_id");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer")
                        .HasColumnName("sender_id");

                    b.Property<int>("SenderType")
                        .HasColumnType("integer")
                        .HasColumnName("receiver_type");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("ReceiveCityId");

                    b.HasIndex("ReceiveStreetId");

                    b.HasIndex("SendCityId");

                    b.HasIndex("SendStreetId");

                    b.HasIndex("VehicleId");

                    b.ToTable("orders", null, t =>
                        {
                            t.HasCheckConstraint("CK_RouteLength", "route_length > 0");
                        });
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.OrderCargo", b =>
                {
                    b.Property<int>("CargoId")
                        .HasColumnType("integer")
                        .HasColumnName("cargo_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(9, 3)
                        .HasColumnType("numeric(9,3)")
                        .HasColumnName("amount");

                    b.Property<decimal>("Price")
                        .HasPrecision(14, 2)
                        .HasColumnType("numeric(14,2)")
                        .HasColumnName("price");

                    b.Property<decimal>("Weight")
                        .HasPrecision(9, 3)
                        .HasColumnType("numeric(9,3)")
                        .HasColumnName("weight");

                    b.HasKey("CargoId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("order_cargoes", null, t =>
                        {
                            t.HasCheckConstraint("CK_amount", "amount > 0");

                            t.HasCheckConstraint("CK_price", "price > 0");

                            t.HasCheckConstraint("CK_weight", "weight > 0");
                        });
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.OrderDriver", b =>
                {
                    b.Property<int>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.HasKey("DriverId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("order_drivers", (string)null);
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Personals.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("banks", (string)null);
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Personals.Individual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.Property<DateOnly>("PassportDate")
                        .HasMaxLength(10)
                        .HasColumnType("date")
                        .HasColumnName("passport_date");

                    b.Property<string>("PassportIssued")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("passport_issued");

                    b.Property<string>("PassportSeries")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("passport_series");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("patronymic");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)")
                        .HasColumnName("phone");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("surname");

                    b.HasKey("Id");

                    b.HasAlternateKey("PassportSeries");

                    b.ToTable("individuals", (string)null);
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Personals.Legal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("bank_account");

                    b.Property<int>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bank_id");

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("company_name");

                    b.Property<int>("HouseNumber")
                        .HasMaxLength(32)
                        .HasColumnType("integer")
                        .HasColumnName("house_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.Property<int>("OfficeNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("patronymic");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)")
                        .HasColumnName("phone");

                    b.Property<int>("StreetId")
                        .HasColumnType("integer")
                        .HasColumnName("street_id");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("surname");

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tin");

                    b.HasKey("Id");

                    b.HasAlternateKey("TIN");

                    b.HasAlternateKey("BankId", "BankAccount");

                    b.HasIndex("CityId");

                    b.HasIndex("StreetId");

                    b.ToTable("legals", (string)null);
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.VehicleCargoCategory", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.Property<int>("CargoCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("cargo_category_id");

                    b.HasKey("VehicleId", "CargoCategoryId");

                    b.HasIndex("CargoCategoryId");

                    b.ToTable("vehicle_cargo_categories", (string)null);
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Vehicles.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<decimal>("Kilometerage")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(9, 2)
                        .HasColumnType("numeric(9,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("kilometerage");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("license_plate");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer")
                        .HasColumnName("model_id");

                    b.Property<int>("OverhaulYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1970)
                        .HasColumnName("overhaul_year");

                    b.Property<int>("Year")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1970)
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasAlternateKey("LicensePlate");

                    b.HasIndex("ModelId");

                    b.ToTable("vehicles", null, t =>
                        {
                            t.HasCheckConstraint("CK_kilometerage", "kilometerage > 0 OR kilometerage = 0");
                        });
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Vehicles.VehicleBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("vehicle_brands", (string)null);
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Vehicles.VehicleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer")
                        .HasColumnName("brand_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("vehicle_models", (string)null);
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Cargoes.Cargo", b =>
                {
                    b.HasOne("LongDistanceService.Data.Entities.Cargoes.CargoCategory", "Category")
                        .WithMany("Cargoes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Cargoes.CargoCategory", b =>
                {
                    b.HasOne("LongDistanceService.Data.Entities.Cargoes.Unit", "Unit")
                        .WithMany("CargoCategories")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Drivers.Driver", b =>
                {
                    b.HasOne("LongDistanceService.Data.Entities.Drivers.DriverCategory", "Category")
                        .WithMany("Drivers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Order", b =>
                {
                    b.HasOne("LongDistanceService.Data.Entities.Addresses.City", "ReceiveCity")
                        .WithMany("ReceiveOrders")
                        .HasForeignKey("ReceiveCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LongDistanceService.Data.Entities.Addresses.Street", "ReceiveStreet")
                        .WithMany("ReceiveOrders")
                        .HasForeignKey("ReceiveStreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LongDistanceService.Data.Entities.Addresses.City", "SendCity")
                        .WithMany("SendOrders")
                        .HasForeignKey("SendCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LongDistanceService.Data.Entities.Addresses.Street", "SendStreet")
                        .WithMany("SendOrders")
                        .HasForeignKey("SendStreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LongDistanceService.Data.Entities.Vehicles.Vehicle", "Vehicle")
                        .WithMany("Orders")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceiveCity");

                    b.Navigation("ReceiveStreet");

                    b.Navigation("SendCity");

                    b.Navigation("SendStreet");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.OrderCargo", b =>
                {
                    b.HasOne("LongDistanceService.Data.Entities.Cargoes.Cargo", "Cargo")
                        .WithMany("OrderCargoes")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LongDistanceService.Data.Entities.Order", "Order")
                        .WithMany("OrderCargoes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.OrderDriver", b =>
                {
                    b.HasOne("LongDistanceService.Data.Entities.Drivers.Driver", "Driver")
                        .WithMany("OrderDrivers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LongDistanceService.Data.Entities.Order", "Order")
                        .WithMany("OrderDrivers")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Personals.Legal", b =>
                {
                    b.HasOne("LongDistanceService.Data.Entities.Personals.Bank", "Bank")
                        .WithMany("Legals")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LongDistanceService.Data.Entities.Addresses.City", "City")
                        .WithMany("Legals")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LongDistanceService.Data.Entities.Addresses.Street", "Street")
                        .WithMany("Legals")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("City");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.VehicleCargoCategory", b =>
                {
                    b.HasOne("LongDistanceService.Data.Entities.Cargoes.CargoCategory", "Category")
                        .WithMany("VehicleCargoCategories")
                        .HasForeignKey("CargoCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LongDistanceService.Data.Entities.Vehicles.Vehicle", "Vehicle")
                        .WithMany("VehicleCargoCategories")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Vehicles.Vehicle", b =>
                {
                    b.HasOne("LongDistanceService.Data.Entities.Vehicles.VehicleModel", "Model")
                        .WithMany("Vehicles")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Vehicles.VehicleModel", b =>
                {
                    b.HasOne("LongDistanceService.Data.Entities.Vehicles.VehicleBrand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Addresses.City", b =>
                {
                    b.Navigation("Legals");

                    b.Navigation("ReceiveOrders");

                    b.Navigation("SendOrders");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Addresses.Street", b =>
                {
                    b.Navigation("Legals");

                    b.Navigation("ReceiveOrders");

                    b.Navigation("SendOrders");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Cargoes.Cargo", b =>
                {
                    b.Navigation("OrderCargoes");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Cargoes.CargoCategory", b =>
                {
                    b.Navigation("Cargoes");

                    b.Navigation("VehicleCargoCategories");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Cargoes.Unit", b =>
                {
                    b.Navigation("CargoCategories");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Drivers.Driver", b =>
                {
                    b.Navigation("OrderDrivers");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Drivers.DriverCategory", b =>
                {
                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderCargoes");

                    b.Navigation("OrderDrivers");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Personals.Bank", b =>
                {
                    b.Navigation("Legals");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Vehicles.Vehicle", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("VehicleCargoCategories");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Vehicles.VehicleBrand", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("LongDistanceService.Data.Entities.Vehicles.VehicleModel", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
